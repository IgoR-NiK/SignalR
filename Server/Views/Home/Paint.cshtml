<!DOCTYPE html>
<html>
<head>
    <title>Рисование</title>
    <style>
        canvas {
            position: relative;
            background-color: #f2e4e4;
        }
    </style>

    <!-- Ссылка на VueJs -->
    <script src="~/Scripts/vue.min.js"></script>
</head>
<body>
    <p>@Html.ActionLink("Скачать клиентские приложения Windows Forms и Android.Apk", "GetFiles", "Home")</p>
    <p>@Html.ActionLink("Перейти в чат", "Index", "Home")</p>

    <div id="app">
        <p><b>Область для рисования</b></p>
        <canvas id='drawingpad' 
                width='400' 
                height='400' 
                v-on:mousedown="mousedown" 
                v-on:mousemove="mousemove" 
                v-on:mouseup="mouseup"></canvas>

        <pre />

        <label for="favcolor">Выбрать цвет пера</label>
        <input type="color" id="favcolor" v-model="colorPen" />
    </div>

    <!-- Ссылка на библиотеку jQuery, поскольку скрипт SignalR имеет зависимости от jQuery -->
    <script src="~/Scripts/jquery-3.3.1.min.js"></script>

    <!--Ссылка на библиотеку SignalR -->
    <script src="~/Scripts/jquery.signalR-2.4.0.min.js"></script>

    <!--Ссылка на автоматически сгенерированный скрипт хаба SignalR -->
    <script src="~/signalr/hubs"></script>

    <script>
        var app = new Vue({
            el: '#app',
            data: {
                // Показывает, присутствует ли подключение к хабу
                isConnect: false,

                // Массив всех точек которые нужно передать на сервер
                points: [],

                // Указывает, происходит ли отрисовка
                isDrawing: false,

                // Цвет пера
                colorPen: "#000000",

                // начальная точка следующей линии
                startX: 0,
                startY: 0,
            },
            methods: {
                mousedown: function mousedown(e) {

                    // получаем позиции x и y относительно верхнего левого угла элемента canvas
                    this.startX = e.layerX || 0;
                    this.startY = e.layerY || 0;
                    this.isDrawing = true;
                },
                mousemove: function mousemove(e) {

                    // рисуем линию, если isdrawing==true
                    if (this.isDrawing) {

                        // получаем позиции x и y относительно верхнего левого угла элемента canvas
                        var mouseX = e.layerX || 0;
                        var mouseY = e.layerY || 0;
                        if (!(mouseX == this.startX &&
                            mouseY == this.startY)) {
                            drawLine(ctx, this.startX, this.startY, mouseX, mouseY, 1, this.colorPen);

                            this.points.push({
                                startX: this.startX,
                                startY: this.startY,
                                endX: mouseX,
                                endY: mouseY,
                                colorPen: this.colorPen
                            });

                            this.startX = mouseX;
                            this.startY = mouseY;
                        }
                    }
                },
                mouseup: function () {
                    this.isDrawing = false;
                }
            }
        });

        // контекст элемента canvas
        var canvas = document.getElementById('drawingpad');
        var ctx = canvas.getContext('2d');

        setInterval(updateServerModel, 75);

        // Ссылка на автоматически-сгенерированный прокси хаба
        var chat = $.connection.myHub;

        // Открываем соединение
        $.connection.hub.start();

        function updateServerModel() {
            if (app.isConnect && app.points.length > 0) {
                chat.server.drawServer(app.points);
                app.points = [];
            }
        }

        // Логика переподключения
        $.connection.hub.stateChanged(function (change) {
            switch (change.newState) {
                case $.signalR.connectionState.connected:
                    app.isConnect = true;
                    break;
                case $.signalR.connectionState.reconnecting:
                    app.isConnect = false;
                    break;
                case $.signalR.connectionState.disconnected:
                    app.isConnect = false;
                    setTimeout($.connection.hub.start(), 5000);
                    break;
            }
        });

        // Функция, которую вызывает хаб
        chat.client.drawClient = function (e) {
            // Добавление линий
            for (var point in e) {
                drawLine(ctx, e[point].startX, e[point].startY, e[point].endX, e[point].endY, 1, e[point].colorPen);
            }
        };

        // просто рисуем линию
        function drawLine(ctx, x1, y1, x2, y2, thickness, colorPen) {
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.lineWidth = thickness;
            ctx.strokeStyle = colorPen;
            ctx.stroke();
        }
    </script>
</body>
</html>