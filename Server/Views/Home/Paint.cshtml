@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Рисование</title>
    <style>
        canvas {
            position: relative;
            background-color: #f2e4e4;
        }
    </style>
</head>
<body>
    <p>@Html.ActionLink("Скачать клиент Windows Forms", "GetFiles", "Home")</p>
    <p>@Html.ActionLink("Перейти в чат", "Index", "Home")</p>

    <p><b>Область для рисования</b></p>
    <canvas id='drawingpad' width='400' height='400'></canvas>

    <pre />

    <label for="favcolor">Выбрать цвет пера</label>
    <input type="color" id="favcolor" name="favcolor"  />

    <script src="~/Scripts/jquery-1.10.2.min.js"></script>

    <!--Ссылка на библиотеку SignalR -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>

    <!--Ссылка на автоматически сгенерированный скрипт хаба SignalR -->
    <script src="~/signalr/hubs"></script>

    <script>
        $(function () {
            var drawGame = {

                // Массив всех точек которые нужно передать на сервер
                points: [],

                // указывает, происходит ли отрисовка
                isDrawing: false,

                // Цвет пера
                colorPen: "#000000",

                // Время рисования следующей точки
             //   time: new Date(),

                // начальная точка следующей линии
                startX: 0,
                startY: 0,
            };            

            // контекст элемента canvas
            var canvas = document.getElementById('drawingpad');
            var ctx = canvas.getContext('2d');

            // Ссылка на автоматически-сгенерированный прокси хаба
            var chat = $.connection.myHub;

            // Открываем соединение
            $.connection.hub.start().done(function () {

                // после открытия соединения устанавливаем обработчики мыши
                canvas.addEventListener("mousedown", mousedown, false);
                canvas.addEventListener("mousemove", mousemove, false);
                canvas.addEventListener("mouseup", mouseup, false);
                setInterval(updateServerModel, 100);
            });

            function updateServerModel() {
                if (drawGame.points.length > 0) {
                    chat.server.drawServer(drawGame.points);
                    drawGame.points = [];
                }
            }

            // Функция, которую вызывает хаб
            chat.client.drawClient = function (e) {
                // Добавление линий
                for (var point in e) {
                    drawLine(ctx, e[point].startX, e[point].startY, e[point].endX, e[point].endY, 1, e[point].colorPen);
                }
            };
            
            // просто рисуем линию
            function drawLine(ctx, x1, y1, x2, y2, thickness, colorPen) {
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.lineTo(x2, y2);
                ctx.lineWidth = thickness;
                ctx.strokeStyle = colorPen;
                ctx.stroke();
            }

            // нажите мыши
            function mousedown(e) {

                // получаем позиции x и y относительно верхнего левого угла элемента canvas
                drawGame.startX = e.layerX || 0;
                drawGame.startY = e.layerY || 0;
                drawGame.isDrawing = true;
            };

            // перемещение мыши
            function mousemove(e) {

                // рисуем линию, если isdrawing==true
                if (drawGame.isDrawing) {

                    // получаем позиции x и y относительно верхнего левого угла элемента canvas
                    var mouseX = e.layerX || 0;
                    var mouseY = e.layerY || 0;
                //    var time = new Date();
                    if (!(mouseX == drawGame.startX &&
                        mouseY == drawGame.startY)) {
                        drawLine(ctx, drawGame.startX,
                            drawGame.startY, mouseX, mouseY, 1, drawGame.colorPen);

                        // модель линий
                        var data = {
                            startX: drawGame.startX,
                            startY: drawGame.startY,
                            endX: mouseX,
                            endY: mouseY,
                            colorPen: drawGame.colorPen,
                    //        timeDelta: Math.abs(time - drawGame.time)
                        };

                        drawGame.points.push(data);

                        drawGame.startX = mouseX;
                        drawGame.startY = mouseY;
                   //     drawGame.time = time;
                    }
                }
            };

            function mouseup(e) {
                drawGame.isDrawing = false;
            }

            $("#favcolor").change(function () {
                drawGame.colorPen = $(this).val();
            });
        });
    </script>
</body>
</html>
